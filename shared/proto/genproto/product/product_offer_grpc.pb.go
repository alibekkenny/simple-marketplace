// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: product_offer.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductOfferService_CreateProductOffer_FullMethodName         = "/product.ProductOfferService/CreateProductOffer"
	ProductOfferService_UpdateProductOffer_FullMethodName         = "/product.ProductOfferService/UpdateProductOffer"
	ProductOfferService_DeleteProductOffer_FullMethodName         = "/product.ProductOfferService/DeleteProductOffer"
	ProductOfferService_GetProductOffersByProduct_FullMethodName  = "/product.ProductOfferService/GetProductOffersByProduct"
	ProductOfferService_GetProductOffersBySupplier_FullMethodName = "/product.ProductOfferService/GetProductOffersBySupplier"
)

// ProductOfferServiceClient is the client API for ProductOfferService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductOfferServiceClient interface {
	CreateProductOffer(ctx context.Context, in *CreateProductOfferRequest, opts ...grpc.CallOption) (*CreateProductOfferResponse, error)
	UpdateProductOffer(ctx context.Context, in *UpdateProductOfferRequest, opts ...grpc.CallOption) (*UpdateProductOfferResponse, error)
	DeleteProductOffer(ctx context.Context, in *DeleteProductOfferRequest, opts ...grpc.CallOption) (*DeleteProductOfferResponse, error)
	GetProductOffersByProduct(ctx context.Context, in *GetProductOffersByProductRequest, opts ...grpc.CallOption) (*GetProductOffersByProductResponse, error)
	GetProductOffersBySupplier(ctx context.Context, in *GetProductOffersBySupplierRequest, opts ...grpc.CallOption) (*GetProductOffersBySupplierResponse, error)
}

type productOfferServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductOfferServiceClient(cc grpc.ClientConnInterface) ProductOfferServiceClient {
	return &productOfferServiceClient{cc}
}

func (c *productOfferServiceClient) CreateProductOffer(ctx context.Context, in *CreateProductOfferRequest, opts ...grpc.CallOption) (*CreateProductOfferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProductOfferResponse)
	err := c.cc.Invoke(ctx, ProductOfferService_CreateProductOffer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productOfferServiceClient) UpdateProductOffer(ctx context.Context, in *UpdateProductOfferRequest, opts ...grpc.CallOption) (*UpdateProductOfferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProductOfferResponse)
	err := c.cc.Invoke(ctx, ProductOfferService_UpdateProductOffer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productOfferServiceClient) DeleteProductOffer(ctx context.Context, in *DeleteProductOfferRequest, opts ...grpc.CallOption) (*DeleteProductOfferResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteProductOfferResponse)
	err := c.cc.Invoke(ctx, ProductOfferService_DeleteProductOffer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productOfferServiceClient) GetProductOffersByProduct(ctx context.Context, in *GetProductOffersByProductRequest, opts ...grpc.CallOption) (*GetProductOffersByProductResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductOffersByProductResponse)
	err := c.cc.Invoke(ctx, ProductOfferService_GetProductOffersByProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productOfferServiceClient) GetProductOffersBySupplier(ctx context.Context, in *GetProductOffersBySupplierRequest, opts ...grpc.CallOption) (*GetProductOffersBySupplierResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProductOffersBySupplierResponse)
	err := c.cc.Invoke(ctx, ProductOfferService_GetProductOffersBySupplier_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductOfferServiceServer is the server API for ProductOfferService service.
// All implementations must embed UnimplementedProductOfferServiceServer
// for forward compatibility.
type ProductOfferServiceServer interface {
	CreateProductOffer(context.Context, *CreateProductOfferRequest) (*CreateProductOfferResponse, error)
	UpdateProductOffer(context.Context, *UpdateProductOfferRequest) (*UpdateProductOfferResponse, error)
	DeleteProductOffer(context.Context, *DeleteProductOfferRequest) (*DeleteProductOfferResponse, error)
	GetProductOffersByProduct(context.Context, *GetProductOffersByProductRequest) (*GetProductOffersByProductResponse, error)
	GetProductOffersBySupplier(context.Context, *GetProductOffersBySupplierRequest) (*GetProductOffersBySupplierResponse, error)
	mustEmbedUnimplementedProductOfferServiceServer()
}

// UnimplementedProductOfferServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductOfferServiceServer struct{}

func (UnimplementedProductOfferServiceServer) CreateProductOffer(context.Context, *CreateProductOfferRequest) (*CreateProductOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProductOffer not implemented")
}
func (UnimplementedProductOfferServiceServer) UpdateProductOffer(context.Context, *UpdateProductOfferRequest) (*UpdateProductOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductOffer not implemented")
}
func (UnimplementedProductOfferServiceServer) DeleteProductOffer(context.Context, *DeleteProductOfferRequest) (*DeleteProductOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductOffer not implemented")
}
func (UnimplementedProductOfferServiceServer) GetProductOffersByProduct(context.Context, *GetProductOffersByProductRequest) (*GetProductOffersByProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductOffersByProduct not implemented")
}
func (UnimplementedProductOfferServiceServer) GetProductOffersBySupplier(context.Context, *GetProductOffersBySupplierRequest) (*GetProductOffersBySupplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductOffersBySupplier not implemented")
}
func (UnimplementedProductOfferServiceServer) mustEmbedUnimplementedProductOfferServiceServer() {}
func (UnimplementedProductOfferServiceServer) testEmbeddedByValue()                             {}

// UnsafeProductOfferServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductOfferServiceServer will
// result in compilation errors.
type UnsafeProductOfferServiceServer interface {
	mustEmbedUnimplementedProductOfferServiceServer()
}

func RegisterProductOfferServiceServer(s grpc.ServiceRegistrar, srv ProductOfferServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductOfferServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductOfferService_ServiceDesc, srv)
}

func _ProductOfferService_CreateProductOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductOfferServiceServer).CreateProductOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductOfferService_CreateProductOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductOfferServiceServer).CreateProductOffer(ctx, req.(*CreateProductOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductOfferService_UpdateProductOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductOfferServiceServer).UpdateProductOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductOfferService_UpdateProductOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductOfferServiceServer).UpdateProductOffer(ctx, req.(*UpdateProductOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductOfferService_DeleteProductOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProductOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductOfferServiceServer).DeleteProductOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductOfferService_DeleteProductOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductOfferServiceServer).DeleteProductOffer(ctx, req.(*DeleteProductOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductOfferService_GetProductOffersByProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductOffersByProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductOfferServiceServer).GetProductOffersByProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductOfferService_GetProductOffersByProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductOfferServiceServer).GetProductOffersByProduct(ctx, req.(*GetProductOffersByProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductOfferService_GetProductOffersBySupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductOffersBySupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductOfferServiceServer).GetProductOffersBySupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductOfferService_GetProductOffersBySupplier_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductOfferServiceServer).GetProductOffersBySupplier(ctx, req.(*GetProductOffersBySupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductOfferService_ServiceDesc is the grpc.ServiceDesc for ProductOfferService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductOfferService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.ProductOfferService",
	HandlerType: (*ProductOfferServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProductOffer",
			Handler:    _ProductOfferService_CreateProductOffer_Handler,
		},
		{
			MethodName: "UpdateProductOffer",
			Handler:    _ProductOfferService_UpdateProductOffer_Handler,
		},
		{
			MethodName: "DeleteProductOffer",
			Handler:    _ProductOfferService_DeleteProductOffer_Handler,
		},
		{
			MethodName: "GetProductOffersByProduct",
			Handler:    _ProductOfferService_GetProductOffersByProduct_Handler,
		},
		{
			MethodName: "GetProductOffersBySupplier",
			Handler:    _ProductOfferService_GetProductOffersBySupplier_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product_offer.proto",
}
